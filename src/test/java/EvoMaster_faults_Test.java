import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import static org.evomaster.client.java.controller.db.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionResultsDto;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import  java.util.List;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;
import static org.evomaster.client.java.controller.expect.ExpectationHandler.expectationHandler;
import  org.evomaster.client.java.controller.expect.ExpectationHandler;
import  io.restassured.path.json.JsonPath;
import  java.util.Arrays;




/**
 * This file was automatically generated by EvoMaster on 2021-12-03T15:45:26.251492400+01:00[Europe/Oslo]
 * <br>
 * The generated test suite contains 2 tests
 * <br>
 * Covered targets: 10
 * <br>
 * Used time: 0h 1m 0s
 * <br>
 * Needed budget for current results: 1%
 * <br>
 * This file contains test cases that are likely to indicate faults.
 */
public class EvoMaster_faults_Test {

    
    private static final SutHandler controller = new org.example.EMDriver();
    private static String baseUrlOfSut;
    /** [ems] - expectations master switch - is the variable that activates/deactivates expectations individual test cases
    * by default, expectations are turned off. The variable needs to be set to [true] to enable expectations
    */
    private static boolean ems = false;
    /**
    * rso - response structure oracle - checking that the response objects match the responses defined in the schema
    */
    private static boolean rso = false;
    
    
    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @BeforeEach
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test
    public void test_0() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"name\": \"L\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/items")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .get(baseUrlOfSut + "/api/items")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", containsString("L"))
                .body("[0].'description'", nullValue())
                .body("[0].'cost'", nullValue());
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_1.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("Iterable«Item»")))
            .that(rso, Arrays.asList()
                .containsAll(((Map) ((List) res_1.extract().response().jsonPath().getJsonObject("")).get(0)).keySet()));
    }
    
    
    @Test
    public void test_1() throws Exception {
        ExpectationHandler expectationHandler = expectationHandler();
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" {} ")
                .post(baseUrlOfSut + "/api/items")
                .then()
                .statusCode(201)
                .assertThat()
                .body(isEmptyOrNullString());
        
        
        ValidatableResponse res_1 = given().accept("*/*")
                .get(baseUrlOfSut + "/api/items")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", nullValue())
                .body("[0].'description'", nullValue())
                .body("[0].'cost'", nullValue());
        
        expectationHandler.expect(ems)
            .that(rso, ((Map) ((List) res_1.extract().response().jsonPath().getJsonObject("")).get(0)).keySet().containsAll(Arrays.asList("Iterable«Item»")))
            .that(rso, Arrays.asList()
                .containsAll(((Map) ((List) res_1.extract().response().jsonPath().getJsonObject("")).get(0)).keySet()));
    }


}
