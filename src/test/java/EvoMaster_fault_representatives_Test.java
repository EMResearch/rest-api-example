import  org.junit.jupiter.api.AfterAll;
import  org.junit.jupiter.api.BeforeAll;
import  org.junit.jupiter.api.BeforeEach;
import  org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import  java.util.Map;
import  io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import  io.restassured.response.ValidatableResponse;
import static org.evomaster.client.java.controller.api.EMTestUtils.*;
import  org.evomaster.client.java.controller.SutHandler;
import static org.evomaster.client.java.controller.db.dsl.SqlDsl.sql;
import  org.evomaster.client.java.controller.api.dto.database.operations.InsertionDto;
import  java.util.List;
import static org.hamcrest.Matchers.*;
import  io.restassured.config.JsonConfig;
import  io.restassured.path.json.config.JsonPathConfig;
import static io.restassured.config.RedirectConfig.redirectConfig;
import static org.evomaster.client.java.controller.contentMatchers.NumberMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.StringMatcher.*;
import static org.evomaster.client.java.controller.contentMatchers.SubStringMatcher.*;




/**
 * This file was automatically generated by EvoMaster on 2021-07-01T14:44:48.601869400+02:00[Europe/Oslo]
 * <br>
 * The generated test suite contains 2 tests
 * <br>
 * Covered targets: 10
 * <br>
 * Used time: 0h 1m 0s
 * <br>
 * Needed budget for current results: 29%
 * <br>
 * This file contains one example of each category of fault. The test cases in this file are a subset of the set of test cases likely to indicate faults.
 */
public class EvoMaster_fault_representatives_Test {

    
    private static final SutHandler controller = new org.example.EMDriver();
    private static String baseUrlOfSut;
    
    
    @BeforeAll
    public static void initClass() {
        controller.setupForGeneratedTest();
        baseUrlOfSut = controller.startSut();
        assertNotNull(baseUrlOfSut);
        RestAssured.enableLoggingOfRequestAndResponseIfValidationFails();
        RestAssured.useRelaxedHTTPSValidation();
        RestAssured.urlEncodingEnabled = false;
        RestAssured.config = RestAssured.config()
            .jsonConfig(JsonConfig.jsonConfig().numberReturnType(JsonPathConfig.NumberReturnType.DOUBLE))
            .redirect(redirectConfig().followRedirects(false));
    }
    
    
    @AfterAll
    public static void tearDown() {
        controller.stopSut();
    }
    
    
    @BeforeEach
    public void initTest() {
        controller.resetStateOfSUT();
    }
    
    
    
    
    @Test
    public void test_0_with500() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ITEM", 260L)
                .d("ID", "1")
            .dtos();
        controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .contentType("application/json")
                .body(" { " + 
                    " \"cost\": 641, " + 
                    " \"name\": \"o7vTiW9OQF8TyKO\" " + 
                    " } ")
                .post(baseUrlOfSut + "/api/items")
                .then()
                .statusCode(500) // org/example/RestApi_43_create
                .assertThat()
                .contentType("application/json")
                .body("'status'", numberMatches(500.0))
                .body("'error'", containsString("Internal Server Error"))
                .body("'message'", containsString(""))
                .body("'path'", containsString("/api/items"));
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/items/0")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/items")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(1))
                .body("[0].'name'", nullValue())
                .body("[0].'description'", nullValue())
                .body("[0].'cost'", nullValue());
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/items/-16776455")
                .then()
                .statusCode(404)
                .assertThat()
                .body(isEmptyOrNullString());
    }
    
    
    @Test
    public void test_1() throws Exception {
        List<InsertionDto> insertions = sql().insertInto("ITEM", 239L)
                .d("ID", "4933")
            .and().insertInto("ITEM", 238L)
                .d("ID", "30")
            .and().insertInto("ITEM", 237L)
                .d("ID", "0")
            .dtos();
        controller.execInsertionsIntoDatabase(insertions);
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/items")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("size()", equalTo(3))
                .body("[0].'name'", nullValue())
                .body("[0].'description'", nullValue())
                .body("[0].'cost'", nullValue())
                .body("[1].'name'", nullValue())
                .body("[1].'description'", nullValue())
                .body("[1].'cost'", nullValue())
                .body("[2].'name'", nullValue())
                .body("[2].'description'", nullValue())
                .body("[2].'cost'", nullValue());
        
        given().accept("*/*")
                .get(baseUrlOfSut + "/api/items/0")
                .then()
                .statusCode(200)
                .assertThat()
                .contentType("application/json")
                .body("'name'", nullValue())
                .body("'description'", nullValue())
                .body("'cost'", nullValue());
    }


}
